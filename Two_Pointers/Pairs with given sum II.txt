Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.

Since the number of such pairs can be very large, return number of such pairs modulo (109 + 7).

Example Input
Input 1:

A = [1, 1, 1]
B = 2

Example Output
Output 1:

 3

The pairs of A[i] and A[j] which sum up to 2 are (0, 1), (0, 2) and (1, 2).
 There are 3 pairs.

public class Solution {
    public int solve(int[] A, int B) {

        int n=A.length;
        int p1=0;
        int p2=n-1;

        long count=0;
        long mod=1000000007; //constraints

        while(p1<p2)
        {
            
             if(A[p1]+A[p2]<B)
                {
                    p1++;
                }
            else if(A[p1]+A[p2]>B)
                {
                    p2--;
                }
            else
            {
                if(A[p1]==A[p2]) // 
                {
                    long x=p2-p1+1;
                    count=count+(x*(x-1)/2);
                    break; 
                }
                else
                {
                    //i need to count how many A[p1] and A[p2] is available

                    int p1Count=0;
                    int p2Count=0;

                    int p1value=A[p1];
                    int p2value=A[p2];

                    while(A[p1]==p1value)
                    {
                        p1Count++;
                        p1++;
                    }
                    while(A[p2]==p2value)
                    {
                        p2Count++;
                        p2--;
                    }

                    count=count+((long)p1Count*p2Count);

                }
                
            }
        }
        return (int)(count%mod);
    }

    
}